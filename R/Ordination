#Incomplete as of now
###########Recycled code
library(tidyverse)
library(here)
library(RUtilpol)
library(REcopol)

age_max <- 22.5e3
age_min <- 0
age_step <- 500

Complete_Data_RoC <-
  RUtilpol::get_latest_file(
    file_name = "data_filtered_2023-06-05__e943281ad9a915e173017455ea3092ce__", #File name needs changed
    dir = here::here("Data/Processed")
  ) %>%
  dplyr::pull(dataset_id)

#Rename per convention
Complete_Data_RoC = Complete_Data_RoC %>% 
  rename(dataset_id = dataset.id, BIN = Working_Unit, collection_handle = collection.handle)

data_roc_binned <-
  REcopol:::add_age_bin(
    Complete_Data_RoC,
    bin_size = age_step,
    age_var_name = "Age",
    sel_method = "backward"
  ) %>%
  dplyr::group_by(dataset.id, Working_Unit) %>%
  dplyr::summarise(
    ROC_mean = mean(ROC, na.rm = TRUE),
    .groups = "drop"
  )

data_age_ref <-
  tibble::tibble(
    BIN = seq(age_min, age_max, age_step)
  ) %>%
  dplyr::mutate(
    time = 1 + (BIN / age_step - (age_max / age_step)) * (-1)
  ) %>%
  dplyr::arrange(time)

data_roc_rescaled <-
  data_roc_binned %>%
  dplyr::left_join(
    data_age_ref,
    by = "BIN"
  )
#########Novel Code
#Loop that check for gaps in time for each dataset, interpolating the gaps, and
#adding the results to a new tibble so no gaps exist for each dataset
data_interp = tibble()
for (i in 1:length(unique(data_roc_rescaled$dataset_id))) {
     
data_subset <-
  data_roc_rescaled %>%
  dplyr::filter(dataset_id %in% unique(data_roc_rescaled$dataset_id)[i:i]) %>%
  dplyr::mutate(
    dataset_id = as.character(dataset_id),
    dataset_id = as.factor(dataset_id)
  )

time_complete <- tibble(time = seq(min(data_subset$time), max(data_subset$time), by = 1))

joined_subset <- time_complete %>%
  left_join(data_subset, by = "time")

interp <- joined_subset %>%
  arrange(time) %>%
  mutate(ROC_mean = approx(x = time, y = ROC_mean, xout = time)$y)

data_interp <- bind_rows(data_interp, interp)
}

#Nest interpolated data independently to use in the DCCA
data_interp_time <- data_interp %>%
  select(dataset_id, time) %>%
  group_by(dataset_id) %>% 
  nest() %>%
  rename(time = data)

data_interp_ROC <- data_interp %>%
  select(dataset_id, ROC_mean) %>%
  group_by(dataset_id) %>% 
  nest() %>%
  rename(ROC_mean = data)

#Ordination w/DCCA
fit_ordination_dcca(
  data_interp_nest_time$data,
  data_interp_nest_ROC$data,
  sel_complexity = "poly_3",
  downweight = FALSE
)
